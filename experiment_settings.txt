All of the following information is taken from https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html, https://pygad.readthedocs.io/en/latest/ and https://pyswarms.readthedocs.io/en/latest/ .

---------------------------------------------------------------------------------------------------------------

Attributes and Parameters of optimization result in JSON files:

* x: The solution of the optimization.
  Data Type: ndarray
* success: Indicates whether the optimizer exited successfully.
  Data Type: boolean
* status: The termination status of the optimizer.
  Data Type: integer
* message: Description of the cause of termination.
  Data Type: string
* fun, jac, hess: Values of the objective function, Jacobian, and Hessian (or its inverse, if available).
  Data Type: ndarray
* hess_inv: Documentation for the Hessian inverse.
  Data Type: Varies based on function used.
* nfev, njev, nhev: Number of evaluations of the objective function, Jacobian, and Hessian, respectively.
  Data Type: integer
* nit: The number of iterations performed by the optimizer.
  Data Type: integer
* callback: List of intermediate function values (every iteration or every tenth iteration)
  Data Type: list of floats

---------------------------------------------------------------------------------------------------------------

Hyperparameters for Nelder-Mead:

* maxiter: Maximum allowed number of iterations.
  Data Type: integer
  Values: 100, 500, 1000
* xatol: The acceptable absolute error in xopt between iterations for convergence.
  Data Type: float
  Values: 1e-5, 1e-10
* fatol: The acceptable absolute error in func(xopt) between iterations for convergence.
  Data Type: float
  Values: 1e-5, 1e-10
* callback: every tenth iteration

---------------------------------------------------------------------------------------------------------------

Hyperparameters for COBYLA:

* maxiter: Maximum allowed number of iterations.
  Data Type: integer
  Values: 100, 500, 1000
* tol: Final accuracy in the optimization. This is a lower bound on the size of the trust region. 
  Data Type: float
  Values: 1e-5, 1e-10
* catol: Tolerance for constraint violations.
  Data Type: float
  Values: 1e-5, 1e-10
* callback: every tenth iteration
 
---------------------------------------------------------------------------------------------------------------

Hyperparameters for BFGS:

* maxiter: Maximum allowed number of iterations.
  Data Type: integer
  Values: 100, 500, 1000
* gtol: Terminate successfully if gradient norm is less than gtol.
  Data Type: float
  Values: 1e-5, 1e-10
* xrtol: Relative tolerance for x.
  Data Type: float
  Values: 1e-5, 1e-10
* eps: If jac is NONE the absolute step size used for numerical approximation of the jacobian via forward differences.
  Data Type: float
  Values: 1e-5, 1e-10  
* callback: every iteration

---------------------------------------------------------------------------------------------------------------

Hyperparameters for Powell:

* maxiter: Maximum allowed number of iterations.
  Data Type: integer
  Values: 100, 500, 1000
* ftol: Relative error in fun(xopt) acceptable for convergence.
  Data Type: float
  Values: 1e-5, 1e-10
* xtol: Relative error in solution xopt acceptable for convergence.
  Data Type: float
  Values: 1e-5, 1e-10
* callback: every iteration

---------------------------------------------------------------------------------------------------------------

Hyperparameters for SLSQP:

* maxiter: Maximum allowed number of iterations.
  Data Type: integer
  Values: 100, 500, 1000
* ftol: Relative error in fun(xopt) acceptable for convergence.
  Data Type: float
  Values: 1e-5, 1e-10
* eps: Step size used for numerical approximation of the Jacobian.
  Data Type: float
  Values: 1e-5, 1e-10  
* callback: every tenth iteration

---------------------------------------------------------------------------------------------------------------

Hyperparameters for SGD, Adam and RMSprop:

* maxiter: Maximum allowed number of iterations.
  Data Type: integer
  Values: 100, 500, 1000
* learning_rate: Step size in each iteration.
  Data Type: float
  Values: 0.01, 0.001, 0.0001
* eps: Correction term for numerical stability to prevent division by zero (only used for Adam and RMSprop).
  Data Type: float
  Values: 1e-5, 1e-10 
* callback: every tenth iteration

---------------------------------------------------------------------------------------------------------------

Hyperparameters for Dual Annealing:  

* maxiter: Maximum allowed number of iterations.
  Data Type: integer
  Values: 100, 500, 1000
* bounds: Bounds for solution x.
  Data Type: array of float
  Value: [0, 2π] across all dimensions (determined during preliminary testing)
* callback: every iteration

---------------------------------------------------------------------------------------------------------------

Hyperparameters for Genetic Algorithm:  

* maxiter: Maximum allowed number of iterations. Iterations are also called generations for Genetic Algorithm.
  Data Type: integer
  Values: 50, 100, 500, 1000
* num_parents_mating: Number of parents mating in each generation to create the next generation of solutions.
  Data Type: integer
  Value: 4
* sol_per_pop: Number of solutions in the population.
  Data Type: integer
  Value: 8
* keep_parents: Number of parents in the current population to be used in the next population. See pygad Documentation for further info.
  Data Type: integer
  Value: 1
* mutation_percent_genes: Percentage of genes to mutate.
  Data Type: integer
  Value: 10
* parent_selection_type: Selection method of the parents in each generation. Description of different types available in paper.
  Data Type: String
  Value: "sss" (determined during preliminary testing)
* crossover_type: Recombination method of the parents, which results in a child. Description of different types available in paper.
  Data Type: String
  Values: "single_point", "two_points", "uniform", "scattered"
* mutation_type: Mutation method. Mutation introduces diversity into the population of solutions. Description of different types available in paper.
  Data Type: String
  Value: "random" (determined during preliminary testing)
* stop_criteria: Termination criterion. "saturate_n" causes termination if achieved function value has not changed for n iterations.
  Data Type: String
  Value: "saturate_50"
* callback: every iteration

---------------------------------------------------------------------------------------------------------------

Hyperparameters for Particle Swarm Optimization:  

* maxiter: Maximum allowed number of iterations.
  Data Type: integer
  Values: 100, 500, 1000
* n_particles: Number of particles in the swarm.
  Data Type: integer
  Value: 60 (determined during preliminary testing)
* w: Inertia value of swarm's movement.
  Data Type: float
  Value: 0.9 (determined during preliminary testing)
* c1: Cognitive value of a particle in the swarm.
  Data Type: float
  Value: 0.5 (determined during preliminary testing)
* c2: Social value of a particle in the swarm.
  Data Type: float
  Value: 2 (determined during preliminary testing)
* ftol: Relative error in fun(xopt) acceptable for convergence. If "-inf": no relative error is acceptable for convergence.
  Data Type: float
  Values: 1e-5, -inf
* ftol_iter: Number of iterations over which the relative error in fun(xopt) is acceptable for convergence.
  Data Type: integer
  Value: 50
* callback: every iteration

---------------------------------------------------------------------------------------------------------------

Hyperparameters for Differential Evolution:  

* maxiter: Maximum allowed number of iterations.
  Data Type: integer
  Values: 100, 500, 1000
* bounds: Bounds for solution x.
  Data Type: array of float
  Value: [0, 2π] across all dimensions
* recombination: Recombination Constant, also called crossover probability. Increasing this value allows a larger number of mutants
                 to progress into the next generation, but at the risk of population stability.
  Data Type: float
  Values: 0.8 (determined during preliminary testing)                
* popsize: A multiplier for setting the total population size. The population has popsize * (N - N_equal) individuals, 
           where N-N_equal is the total number of free parameters (in our case N_equal = 0 and N = 6).
  Data Type: integer
  Value: 10 (determined during preliminary testing)
* tol: Relative tolerance for convergence, the solving stops when np.std(pop) <= atol + tol * np.abs(np.mean(population_energies)),
       where and atol and tol are the absolute and relative tolerance respectively.
  Data Type: float
  Values: 1e-5 (determined during preliminary testing)
* callback: every tenth iteration








